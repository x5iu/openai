//go:build legacy

// Code generated by defc, DO NOT EDIT.

package azure

import (
	"bufio"
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/textproto"
	"text/template"
	"time"

	__rt "github.com/x5iu/defc/runtime"
	"github.com/x5iu/openai"
)

const (
	CallerCreateChatCompletion = "CreateChatCompletion"
)

func NewBaseClient[C Caller](BaseClient C) BaseClient[C] {
	return &implBaseClient[C]{__BaseClient: BaseClient}
}

type implBaseClient[C Caller] struct {
	__BaseClient C
}

var (
	addrTmplCreateChatCompletion   = template.Must(template.New("AddressCreateChatCompletion").Funcs(template.FuncMap{"encode_json": openai.EncodeJSON, "trim_trailing_slash": openai.TrimTrailingSlash}).Parse("{{ trim_trailing_slash $.BaseClient.Endpoint }}/openai/deployments/{{ if $.BaseClient.DeploymentID }}{{ $.BaseClient.DeploymentID }}{{ else }}{{ $.request.Model }}{{ end }}/chat/completions?api-version={{ $.BaseClient.APIVersion }}"))
	headerTmplCreateChatCompletion = template.Must(template.New("HeaderCreateChatCompletion").Funcs(template.FuncMap{"encode_json": openai.EncodeJSON, "trim_trailing_slash": openai.TrimTrailingSlash}).Parse("Content-Type: application/json\r\nApi-Key: {{ $.BaseClient.APIKey }}\r\n\r\n{{ encode_json $.request }}"))
)

func (__imp *implBaseClient[C]) CreateChatCompletion(ctx context.Context, request *openai.ChatCompletionRequest) (openai.ChatCompletion, error) {
	var innerCreateChatCompletion any = __imp.Inner()

	addrCreateChatCompletion := __rt.GetBuffer()
	defer __rt.PutBuffer(addrCreateChatCompletion)
	defer addrCreateChatCompletion.Reset()

	headerCreateChatCompletion := __rt.GetBuffer()
	defer __rt.PutBuffer(headerCreateChatCompletion)
	defer headerCreateChatCompletion.Reset()

	var (
		v0CreateChatCompletion           = __rt.New[openai.ChatCompletion]()
		errCreateChatCompletion          error
		httpResponseCreateChatCompletion *http.Response
		responseCreateChatCompletion     __rt.FutureResponse = __imp.response()
	)

	if errCreateChatCompletion = addrTmplCreateChatCompletion.Execute(addrCreateChatCompletion, map[string]any{
		"BaseClient": __imp.Inner(),
		"ctx":        ctx,
		"request":    request,
	}); errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error building 'CreateChatCompletion' url: %w", errCreateChatCompletion)
	}

	if errCreateChatCompletion = headerTmplCreateChatCompletion.Execute(headerCreateChatCompletion, map[string]any{
		"BaseClient": __imp.Inner(),
		"ctx":        ctx,
		"request":    request,
	}); errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error building 'CreateChatCompletion' header: %w", errCreateChatCompletion)
	}
	bufReaderCreateChatCompletion := bufio.NewReader(headerCreateChatCompletion)
	mimeHeaderCreateChatCompletion, errCreateChatCompletion := textproto.NewReader(bufReaderCreateChatCompletion).ReadMIMEHeader()
	if errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error reading 'CreateChatCompletion' header: %w", errCreateChatCompletion)
	}

	urlCreateChatCompletion := addrCreateChatCompletion.String()
	requestBodyCreateChatCompletion, errCreateChatCompletion := io.ReadAll(bufReaderCreateChatCompletion)
	if errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error reading 'CreateChatCompletion' request body: %w", errCreateChatCompletion)
	}
	requestCreateChatCompletion, errCreateChatCompletion := http.NewRequestWithContext(ctx, "POST", urlCreateChatCompletion, bytes.NewReader(requestBodyCreateChatCompletion))
	if errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error building 'CreateChatCompletion' request: %w", errCreateChatCompletion)
	}

	for kCreateChatCompletion, vvCreateChatCompletion := range mimeHeaderCreateChatCompletion {
		for _, vCreateChatCompletion := range vvCreateChatCompletion {
			requestCreateChatCompletion.Header.Add(kCreateChatCompletion, vCreateChatCompletion)
		}
	}

	startCreateChatCompletion := time.Now()

	if httpClientCreateChatCompletion, okCreateChatCompletion := innerCreateChatCompletion.(interface{ Client() *http.Client }); okCreateChatCompletion {
		httpResponseCreateChatCompletion, errCreateChatCompletion = httpClientCreateChatCompletion.Client().Do(requestCreateChatCompletion)
	} else {
		httpResponseCreateChatCompletion, errCreateChatCompletion = http.DefaultClient.Do(requestCreateChatCompletion)
	}

	if logCreateChatCompletion, okCreateChatCompletion := innerCreateChatCompletion.(interface {
		Log(ctx context.Context, caller string, request *http.Request, response *http.Response, elapse time.Duration)
	}); okCreateChatCompletion {
		logCreateChatCompletion.Log(ctx, "CreateChatCompletion", requestCreateChatCompletion, httpResponseCreateChatCompletion, time.Since(startCreateChatCompletion))
	}

	if errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error sending 'CreateChatCompletion' request: %w", errCreateChatCompletion)
	}

	if httpResponseCreateChatCompletion.StatusCode < 200 || httpResponseCreateChatCompletion.StatusCode > 299 {
		return v0CreateChatCompletion, __rt.NewFutureResponseError("CreateChatCompletion", httpResponseCreateChatCompletion)
	}

	if errCreateChatCompletion = responseCreateChatCompletion.FromResponse("CreateChatCompletion", httpResponseCreateChatCompletion); errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error converting 'CreateChatCompletion' response: %w", errCreateChatCompletion)
	}

	addrCreateChatCompletion.Reset()
	headerCreateChatCompletion.Reset()

	if errCreateChatCompletion = responseCreateChatCompletion.Err(); errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error returned from 'CreateChatCompletion' response: %w", errCreateChatCompletion)
	}

	if errCreateChatCompletion = responseCreateChatCompletion.ScanValues(&v0CreateChatCompletion); errCreateChatCompletion != nil {
		return v0CreateChatCompletion, fmt.Errorf("error scanning value from 'CreateChatCompletion' response: %w", errCreateChatCompletion)
	}

	return v0CreateChatCompletion, nil
}

func (__imp *implBaseClient[C]) Inner() C {
	return __imp.__BaseClient
}

func (*implBaseClient[C]) response() *openai.ResponseHandler {
	return new(openai.ResponseHandler)
}
